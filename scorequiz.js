// Generated by LiveScript 1.3.1
(function(){
  var root, fs, yamlfile, ref$, sum, average, toQuestionAndUserInfo, uinfoForUser, avgForUser, exec, ttest_rel, slice$ = [].slice;
  root = typeof exports != 'undefined' && exports !== null ? exports : this;
  fs = require('fs');
  yamlfile = require('yamlfile');
  ref$ = require('prelude-ls'), sum = ref$.sum, average = ref$.average;
  toQuestionAndUserInfo = function(filename){
    var lines, question_info, question_indexes, username_idx, i$, ref$, len$, idx, column_text, isLower, isUpper, splitAnswers, user_info, reference_user_idx, allchecked_user_idx, row_text, cells, username, question_answers, j$, len1$, cell_text, uinfo, listContains, scoreAnswers, question_idx, answers, reference_answers, all_answers;
    lines = fs.readFileSync(filename, 'utf-8').split('\n');
    question_info = [];
    question_indexes = {};
    username_idx = null;
    for (i$ = 0, len$ = (ref$ = lines[0].split('\t')).length; i$ < len$; ++i$) {
      idx = i$;
      column_text = ref$[i$];
      if (column_text.indexOf('时间戳记') !== -1) {
        continue;
      }
      if (column_text.indexOf('Microsoft alias') !== -1) {
        username_idx = idx;
        continue;
      }
      if (column_text.indexOf('Which of the following are true of cell membranes?') !== -1) {
        continue;
      }
      question_indexes[idx] = true;
      question_info.push({
        idx: idx,
        text: column_text
      });
    }
    if (username_idx == null) {
      throw 'does not have username_idx';
    }
    isLower = function(c){
      return ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"].indexOf(c) !== -1;
    };
    isUpper = function(c){
      return ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"].indexOf(c) !== -1;
    };
    splitAnswers = function(answers){
      var output, curgroup, parts, i$, len$, idx, part;
      output = [];
      curgroup = [];
      parts = answers.split(', ');
      for (i$ = 0, len$ = parts.length; i$ < len$; ++i$) {
        idx = i$;
        part = parts[i$];
        if (part.trim() === '') {
          continue;
        }
        if (isUpper(part[0])) {
          if (curgroup.length > 0) {
            output.push(curgroup.join(', '));
            curgroup = [];
          }
          curgroup.push(part);
        } else {
          curgroup.push(part);
        }
      }
      if (curgroup.length > 0) {
        output.push(curgroup.join(', '));
        curgroup = [];
      }
      return output;
    };
    user_info = [];
    reference_user_idx = null;
    allchecked_user_idx = null;
    for (i$ = 0, len$ = (ref$ = slice$.call(lines, 1)).length; i$ < len$; ++i$) {
      idx = i$;
      row_text = ref$[i$];
      cells = row_text.split('\t');
      username = cells[username_idx];
      question_answers = [];
      for (j$ = 0, len1$ = cells.length; j$ < len1$; ++j$) {
        idx = j$;
        cell_text = cells[j$];
        if (question_indexes[idx] == null) {
          continue;
        }
        question_answers.push(splitAnswers(cell_text));
      }
      user_info.push({
        username: username,
        question_answers: question_answers
      });
    }
    for (i$ = 0, len$ = user_info.length; i$ < len$; ++i$) {
      idx = i$;
      uinfo = user_info[i$];
      if (uinfo.username === 'reference') {
        reference_user_idx = idx;
      }
      if (uinfo.username === 'allchecked') {
        allchecked_user_idx = idx;
      }
    }
    if (reference_user_idx == null) {
      throw 'need reference user';
    }
    if (allchecked_user_idx == null) {
      throw 'need allchecked user';
    }
    listContains = function(list, item){
      return list.indexOf(item) !== -1;
    };
    scoreAnswers = function(myanswers, refanswers, allanswers){
      var num_correct, total, i$, len$, option, minechecked, refchecked;
      num_correct = 0;
      total = allanswers.length;
      for (i$ = 0, len$ = allanswers.length; i$ < len$; ++i$) {
        option = allanswers[i$];
        minechecked = listContains(myanswers, option);
        refchecked = listContains(refanswers, option);
        if (minechecked === refchecked) {
          num_correct += 1;
        }
      }
      return num_correct / total;
    };
    for (i$ = 0, len$ = user_info.length; i$ < len$; ++i$) {
      idx = i$;
      uinfo = user_info[i$];
      uinfo.scores = [];
      for (j$ = 0, len1$ = (ref$ = uinfo.question_answers).length; j$ < len1$; ++j$) {
        question_idx = j$;
        answers = ref$[j$];
        reference_answers = user_info[reference_user_idx].question_answers[question_idx];
        all_answers = user_info[allchecked_user_idx].question_answers[question_idx];
        uinfo.scores.push(scoreAnswers(answers, reference_answers, all_answers));
      }
      uinfo.average_score = sum(uinfo.scores) / uinfo.scores.length;
    }
    return [question_info, user_info];
  };
  uinfoForUser = function(username, user_info){
    var output, i$, len$, uinfo;
    output = null;
    for (i$ = 0, len$ = user_info.length; i$ < len$; ++i$) {
      uinfo = user_info[i$];
      if (uinfo.username === username) {
        output = uinfo;
      }
    }
    return output;
  };
  avgForUser = function(username, user_info){
    var output, i$, len$, uinfo;
    output = null;
    for (i$ = 0, len$ = user_info.length; i$ < len$; ++i$) {
      uinfo = user_info[i$];
      if (uinfo.username === username) {
        output = uinfo;
      }
    }
    return output.average_score;
  };
  exec = require('shelljs').exec;
  ttest_rel = function(list_a, list_b){
    return exec("python ttest_rel.py '" + JSON.stringify(list_a) + "' '" + JSON.stringify(list_b) + "'").output;
  };
  (function(){
    var ref$, question_info_1, user_info_1, question_info_2, user_info_2, question_info_exam1, user_info_exam1, user_info_exam2, conditions, scores_invideo, scores_quizcram, scores_invideo_exam, scores_quizcram_exam, username, condition, score_part1, score_part2, score_exam1, score_exam2, score_invideo, score_quizcram, score_exam_invideo, score_exam_quizcram, usernames0, res$, usernames1, invideo_part1, i$, len$, user, quizcram_part1, invideo_part2, quizcram_part2, invideo_all, quizcram_all, invideo_exam_part1, quizcram_exam_part1, invideo_exam_part2, quizcram_exam_part2, invideo_exam_all, quizcram_exam_all;
    ref$ = toQuestionAndUserInfo('quiz1.tsv'), question_info_1 = ref$[0], user_info_1 = ref$[1];
    ref$ = toQuestionAndUserInfo('quiz2.tsv'), question_info_2 = ref$[0], user_info_2 = ref$[1];
    ref$ = toQuestionAndUserInfo('exam1.tsv'), question_info_exam1 = ref$[0], user_info_exam1 = ref$[1];
    ref$ = toQuestionAndUserInfo('exam2.tsv'), question_info_exam1 = ref$[0], user_info_exam2 = ref$[1];
    conditions = yamlfile.readFileSync('conditionsv1.yaml');
    scores_invideo = [];
    scores_quizcram = [];
    scores_invideo_exam = [];
    scores_quizcram_exam = [];
    for (username in conditions) {
      condition = conditions[username];
      score_part1 = avgForUser(username, user_info_1);
      score_part2 = avgForUser(username, user_info_2);
      score_exam1 = avgForUser(username, user_info_exam1);
      score_exam2 = avgForUser(username, user_info_exam2);
      score_invideo = (fn$());
      score_quizcram = (fn1$());
      score_exam_invideo = (fn2$());
      score_exam_quizcram = (fn3$());
      console.log('username: ' + username + ' quizcram: ' + score_quizcram + ' invideo: ' + score_invideo);
      scores_quizcram.push(score_quizcram);
      scores_invideo.push(score_invideo);
      scores_quizcram_exam.push(score_exam_quizcram);
      scores_invideo_exam.push(score_exam_invideo);
    }
    res$ = [];
    for (username in conditions) {
      condition = conditions[username];
      if (condition === 0) {
        res$.push(username);
      }
    }
    usernames0 = res$;
    res$ = [];
    for (username in conditions) {
      condition = conditions[username];
      if (condition === 1) {
        res$.push(username);
      }
    }
    usernames1 = res$;
    res$ = [];
    for (i$ = 0, len$ = usernames0.length; i$ < len$; ++i$) {
      user = usernames0[i$];
      res$.push(avgForUser(user, user_info_1));
    }
    invideo_part1 = res$;
    console.log('invideo_part1:' + average(invideo_part1));
    res$ = [];
    for (i$ = 0, len$ = usernames1.length; i$ < len$; ++i$) {
      user = usernames1[i$];
      res$.push(avgForUser(user, user_info_1));
    }
    quizcram_part1 = res$;
    console.log('quizcram_part1:' + average(quizcram_part1));
    res$ = [];
    for (i$ = 0, len$ = usernames1.length; i$ < len$; ++i$) {
      user = usernames1[i$];
      res$.push(avgForUser(user, user_info_2));
    }
    invideo_part2 = res$;
    console.log('invideo_part2:' + average(invideo_part2));
    res$ = [];
    for (i$ = 0, len$ = usernames0.length; i$ < len$; ++i$) {
      user = usernames0[i$];
      res$.push(avgForUser(user, user_info_2));
    }
    quizcram_part2 = res$;
    console.log('quizcram_part2:' + average(quizcram_part2));
    invideo_all = invideo_part1.concat(invideo_part2);
    console.log('invideo_all:' + average(invideo_all));
    quizcram_all = quizcram_part1.concat(quizcram_part2);
    console.log('quizcram_all:' + average(quizcram_all));
    console.log(ttest_rel(scores_quizcram, scores_invideo));
    res$ = [];
    for (i$ = 0, len$ = usernames0.length; i$ < len$; ++i$) {
      user = usernames0[i$];
      res$.push(avgForUser(user, user_info_exam1));
    }
    invideo_exam_part1 = res$;
    console.log('invideo_exam_part1:' + average(invideo_exam_part1));
    res$ = [];
    for (i$ = 0, len$ = usernames1.length; i$ < len$; ++i$) {
      user = usernames1[i$];
      res$.push(avgForUser(user, user_info_exam1));
    }
    quizcram_exam_part1 = res$;
    console.log('quizcram_exam_part1:' + average(quizcram_exam_part1));
    res$ = [];
    for (i$ = 0, len$ = usernames1.length; i$ < len$; ++i$) {
      user = usernames1[i$];
      res$.push(avgForUser(user, user_info_exam2));
    }
    invideo_exam_part2 = res$;
    console.log('invideo_exam_part2:' + average(invideo_exam_part2));
    res$ = [];
    for (i$ = 0, len$ = usernames0.length; i$ < len$; ++i$) {
      user = usernames0[i$];
      res$.push(avgForUser(user, user_info_exam2));
    }
    quizcram_exam_part2 = res$;
    console.log('quizcram_exam_part2:' + average(quizcram_exam_part2));
    invideo_exam_all = invideo_exam_part1.concat(invideo_exam_part2);
    console.log('invideo_exam_all:' + average(invideo_exam_all));
    quizcram_exam_all = quizcram_exam_part1.concat(quizcram_exam_part2);
    console.log('quizcram_exam_all:' + average(quizcram_exam_all));
    return console.log(ttest_rel(scores_quizcram_exam, scores_invideo_exam));
    function fn$(){
      switch (condition) {
      case 0:
        return score_part1;
      case 1:
        return score_part2;
      }
    }
    function fn1$(){
      switch (condition) {
      case 0:
        return score_part2;
      case 1:
        return score_part1;
      }
    }
    function fn2$(){
      switch (condition) {
      case 0:
        return score_exam1;
      case 1:
        return score_exam2;
      }
    }
    function fn3$(){
      switch (condition) {
      case 0:
        return score_exam2;
      case 1:
        return score_exam1;
      }
    }
  })();
}).call(this);
